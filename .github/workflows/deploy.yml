name: Deploy Backend to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e

            echo "📥 Updating code from git..."
            # Remove existing directory and clone fresh (with sudo for permission issues)
            sudo rm -rf ~/dungji-market-backend || true
            git clone https://github.com/dungjimarket-cyber/dungji-market-backend.git ~/dungji-market-backend
            cd ~/dungji-market-backend

            echo "📝 Checking .env file..."
            # Just set DEBUG=False in existing .env, keep everything else
            if [ -f .env ]; then
              echo "✅ .env file exists, updating DEBUG setting..."
              sed -i 's/DEBUG=True/DEBUG=False/g' .env || true
            else
              echo "❌ .env file missing, creating basic one..."
              # Copy from local .env if it exists, otherwise create minimal one
              cat > .env << 'EOF'
            # Django 기본 설정
            DEBUG=False
            SECRET_KEY=django-insecure-6yq+(hn%+5$vfx-rb3^0*s*627ei9*vls(w86ti(%!8o)@bslx
            DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,[::1],0.0.0.0,54.180.82.238,api.dungjimarket.com
            DJANGO_ENV=production

            # 데이터베이스 설정
            SQL_ENGINE=django.db.backends.postgresql
            DB_NAME=dungjimarket
            DB_USER=postgres
            DB_PASSWORD=Hyperpets2025!
            DB_HOST=hyper-pets-db.ctos6oueuros.ap-northeast-2.rds.amazonaws.com
            DB_PORT=5432

            # CORS 설정
            CORS_ALLOWED_ORIGINS=http://localhost:3000,https://www.dungjimarket.com,http://54.180.82.238:8000,https://api.dungjimarket.com,https://dungjimarket.com
            CSRF_TRUSTED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,https://www.dungjimarket.com,http://54.180.82.238:8000,https://api.dungjimarket.com,https://dungjimarket.com

            # 서버 설정
            PORT=8000
            FRONTEND_URL=https://www.dungjimarket.com

            # AWS 설정
            USE_S3=False
            EOF
            fi

            echo "🛑 Stopping all existing containers..."
            sudo docker stop $(sudo docker ps -q) || true
            sudo docker rm $(sudo docker ps -aq) || true

            echo "🧹 Cleaning up Docker resources..."
            sudo docker system prune -f || true

            echo "🏗️ Building and starting container (Django only, no nginx)..."
            # Use regular docker-compose but without nginx to avoid port 80 conflict
            sudo docker-compose up -d --build --force-recreate web

            echo "⏳ Waiting for service to start..."
            sleep 15

            echo "📊 Checking container status..."
            sudo docker-compose ps

            echo "✅ Simple deployment complete!"