name: Deploy Backend to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # ÏàòÎèô Ïã§Ìñâ ÌóàÏö©

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production  # GitHub Environment ÏÇ¨Ïö© (ÏÑ†ÌÉùÏÇ¨Ìï≠)

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Validate secrets
      run: |
        echo "Validating required secrets..."
        if [ -z "${{ secrets.EC2_HOST }}" ]; then
          echo "‚ùå EC2_HOST secret is not set!"
          exit 1
        fi
        if [ -z "${{ secrets.EC2_SSH_KEY }}" ]; then
          echo "‚ùå EC2_SSH_KEY secret is not set!"
          exit 1
        fi
        echo "‚úÖ All required secrets are configured"

    - name: Copy files to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        source: "."
        target: "~/dungji-market-backend"
        rm: true
        strip_components: 0
        timeout: 60s
        command_timeout: 15m

    - name: Upload .env to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          echo "${{ secrets.ENV_FILE }}" > ~/dungji-market-backend/.env

    - name: Deploy application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 60s
        command_timeout: 15m
        script: |
          set -e  # Exit on any error
          
          echo "üöÄ Starting deployment process..."
          cd ~/dungji-market-backend
          
          # Ìè¨Ìä∏ 8000ÏùÑ ÏÇ¨Ïö©ÌïòÎäî ÌîÑÎ°úÏÑ∏Ïä§ Ï¢ÖÎ£å
          echo "üîç Checking for processes using port 8000..."
          
          # Î™®Îì† Docker Ïª®ÌÖåÏù¥ÎÑà Ï§ëÏßÄ (Ìè¨Ìä∏ Ï∂©Îèå Î∞©ÏßÄ)
          echo "Stopping all Docker containers that might use port 8000..."
          sudo docker ps -q | xargs -r sudo docker stop || true
          
          # Î™®Îì† Ï¢ÖÎ£åÎêú Ïª®ÌÖåÏù¥ÎÑà Ï†úÍ±∞
          echo "Removing all stopped containers..."
          sudo docker container prune -f || true
          
          # netstatÏúºÎ°ú Ìè¨Ìä∏ ÌôïÏù∏
          echo "Checking port usage with netstat..."
          sudo netstat -tlnp | grep :8000 || true
          
          # lsofÎ°ú Ìè¨Ìä∏ ÌôïÏù∏
          if sudo lsof -i :8000; then
            echo "üõë Port 8000 is in use. Force killing processes..."
            sudo lsof -ti:8000 | xargs -r sudo kill -9 || true
            sleep 5
          fi
          
          # fuserÎ°ú Ï∂îÍ∞Ä ÌôïÏù∏
          sudo fuser -k 8000/tcp || true
          sleep 2
          
          # ÏµúÏ¢Ö ÌôïÏù∏
          if sudo lsof -i :8000; then
            echo "‚ùå ERROR: Port 8000 is still in use after cleanup!"
            sudo lsof -i :8000
            exit 1
          else
            echo "‚úÖ Port 8000 is now available"
          fi

          # ÌïÑÏàò ÌååÏùº ÌôïÏù∏
          if [ ! -f .env ]; then
            echo "‚ùå ERROR: .env file not found!"
            echo "Please create .env file on the server first."
            echo "Refer to DEPLOYMENT.md for configuration details."
            exit 1
          fi
          echo "‚úÖ Environment file found"
          
          if [ ! -f docker-compose.yml ]; then
            echo "‚ùå ERROR: docker-compose.yml file not found!"
            exit 1
          fi
          echo "‚úÖ Docker Compose file found"
          
          # Í∏∞Ï°¥ Ïª®ÌÖåÏù¥ÎÑà Ï§ëÏßÄ Î∞è Ï†ïÎ¶¨
          echo "üõë Stopping existing containers..."
          sudo docker-compose down --remove-orphans || true
          
          # Î™®Îì† Í¥ÄÎ†® Ïª®ÌÖåÏù¥ÎÑà Í∞ïÏ†ú Ï†ïÎ¶¨
          echo "üßπ Cleaning up any remaining containers..."
          # sudoÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Í∂åÌïú Î¨∏Ï†ú Ìï¥Í≤∞
          sudo docker ps -a | grep dungji-market-backend | awk '{print $1}' | xargs -r sudo docker stop || true
          sudo docker ps -a | grep dungji-market-backend | awk '{print $1}' | xargs -r sudo docker rm -f || true
          
          # ÌäπÏ†ï Î¨∏Ï†úÍ∞Ä ÏûàÎäî Ïª®ÌÖåÏù¥ÎÑà Í∞ïÏ†ú Ï†úÍ±∞
          echo "üßπ Force removing stuck containers..."
          # Docker Îç∞Î™¨ Ïû¨ÏãúÏûëÏù¥ ÌïÑÏöîÌï† Ïàò ÏûàÏùå
          if sudo docker ps -a | grep -q "580c0a899188"; then
            echo "Found stuck container 580c0a899188, attempting force removal..."
            sudo systemctl restart docker || true
            sleep 5
            sudo docker rm -f 580c0a899188 || true
          fi
          
          # Î™®Îì† dungji Í¥ÄÎ†® Ïª®ÌÖåÏù¥ÎÑà Í∞ïÏ†ú Ï†úÍ±∞
          sudo docker ps -a | grep -E "(dungji|8000)" | awk '{print $1}' | xargs -r sudo docker rm -f || true
          
          # Docker ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ïÎ¶¨
          echo "üßπ Cleaning up Docker networks..."
          sudo docker network ls | grep dungji-market-backend | awk '{print $2}' | xargs -r sudo docker network rm || true
          
          # ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÎäî Docker Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨
          echo "üßπ Cleaning up unused Docker resources..."
          sudo docker system prune -f || true
          
          # Ìè¨Ìä∏ 8000Ïù¥ Ïó¨Ï†ÑÌûà ÏÇ¨Ïö© Ï§ëÏù∏ÏßÄ ÏµúÏ¢Ö ÌôïÏù∏
          if sudo lsof -i :8000 2>/dev/null; then
            echo "‚ö†Ô∏è  Port 8000 is still in use. Using alternative approach..."
            # Ïª®ÌÖåÏù¥ÎÑàÎ•º Îã§Î•∏ Ìè¨Ìä∏Î°ú Ïã§ÌñâÌïòÎäî ÎåÄÏïà
            export HOST_PORT=8001
            echo "Using alternative port $HOST_PORT"
          else
            export HOST_PORT=8000
          fi
          
          # ÏÉà Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ïª®ÌÖåÏù¥ÎÑà ÏãúÏûë
          echo "üèóÔ∏è  Building and starting containers..."
          sudo docker-compose -p dungji-market-backend up --build -d --force-recreate --remove-orphans
          
          # Ïª®ÌÖåÏù¥ÎÑà ÏãúÏûë ÎåÄÍ∏∞
          echo "‚è≥ Waiting for containers to be ready..."
          sleep 30
          
          # Ïª®ÌÖåÏù¥ÎÑà ÏÉÅÌÉú ÌôïÏù∏
          echo "üìä Checking container status..."
          sudo docker-compose ps
          
          # Ïõπ ÏÑúÎπÑÏä§Í∞Ä Ï§ÄÎπÑÎê† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
          echo "üîç Waiting for web service to be ready..."
          WEB_READY=false
          for i in {1..30}; do
            if sudo docker-compose ps | grep -q "web.*Up"; then
              echo "‚úÖ Web container is running"
              if sudo docker-compose exec -T web python manage.py check --deploy 2>/dev/null; then
                echo "‚úÖ Web service is ready"
                WEB_READY=true
                break
              fi
            fi
            echo "Attempt $i/30: Web service not ready yet, waiting..."
            sleep 10
          done
          
          if [ "$WEB_READY" = false ]; then
            echo "‚ùå Web service failed to start within timeout"
            echo "Container logs:"
            sudo docker-compose logs web
            exit 1
          fi
          
          # ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò Ïã§Ìñâ
          echo "üîÑ Running database migrations..."
          sudo docker-compose exec -T web python manage.py migrate --noinput
          
          # Ï†ïÏ†Å ÌååÏùº ÏàòÏßë
          echo "üì¶ Collecting static files..."
          sudo docker-compose exec -T web python manage.py collectstatic --noinput
          
          # ÏµúÏ¢Ö ÏÉÅÌÉú ÌôïÏù∏
          echo "üè• Final health check..."
          sudo docker-compose ps
          
          # Î°úÍ∑∏ Ï∂úÎ†•
          echo "üìã Recent application logs:"
          sudo docker-compose logs --tail=20 web
          
          # Í∞ÑÎã®Ìïú API ÌÖåÏä§Ìä∏
          echo "üß™ Testing API endpoint..."
          API_HEALTHY=false
          # ÏÇ¨Ïö©Îêú Ìè¨Ìä∏ ÌôïÏù∏
          ACTUAL_PORT=$(sudo docker-compose -p dungji-market-backend ps | grep web | grep -oP '0.0.0.0:\K[0-9]+' | head -1)
          if [ -z "$ACTUAL_PORT" ]; then
            ACTUAL_PORT=8000
          fi
          echo "Testing on port: $ACTUAL_PORT"
          
          for i in {1..10}; do
            if curl -f -s http://localhost:$ACTUAL_PORT/api/health/ > /dev/null 2>&1; then
              echo "‚úÖ API health check passed"
              API_HEALTHY=true
              break
            fi
            echo "API check attempt $i/10: waiting..."
            sleep 3
          done
          
          if [ "$API_HEALTHY" = false ]; then
            echo "‚ö†Ô∏è  API health check failed after multiple attempts"
            echo "This might indicate the application is not fully ready"
          fi
          
          echo "üéâ Deployment completed successfully!"
          echo "üìù Application is running at: http://${{ secrets.EC2_HOST }}:$ACTUAL_PORT"